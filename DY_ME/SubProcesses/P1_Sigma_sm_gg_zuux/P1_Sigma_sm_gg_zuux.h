// 
// *  This file was automatically generated by MoMEMta-MaGMEE,
// *  A MadGraph Matrix Element Exporter plugin for MoMEMta.
// *
// *  It is subject to MoMEMta-MaGMEE's license and copyright:
// *
// *  Copyright (C) 2016  Universite catholique de Louvain (UCL), Belgium
// *
// *  This program is free software: you can redistribute it and/or modify
// *  it under the terms of the GNU General Public License as published by
// *  the Free Software Foundation, either version 3 of the License, or
// *  (at your option) any later version.
// *
// *  This program is distributed in the hope that it will be useful,
// *  but WITHOUT ANY WARRANTY; without even the implied warranty of
// *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// *  GNU General Public License for more details.
// *
// *  You should have received a copy of the GNU General Public License
// *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 

#pragma once

#include <complex> 
#include <vector> 
#include <utility> 
#include <map> 
#include <functional> 

#include <Parameters_sm.h> 
#include <SubProcess.h> 

#include <momemta/MatrixElement.h> 

namespace DY_ME_sm 
{

//==========================================================================
// A class for calculating the matrix elements for
// Process: g g > z u u~ WEIGHTED<=4 @1
// Process: g g > z c c~ WEIGHTED<=4 @1
// Process: g g > z d d~ WEIGHTED<=4 @1
// Process: g g > z s s~ WEIGHTED<=4 @1
// Process: g u > z g u WEIGHTED<=4 @1
// Process: g c > z g c WEIGHTED<=4 @1
// Process: g d > z g d WEIGHTED<=4 @1
// Process: g s > z g s WEIGHTED<=4 @1
// Process: g u~ > z g u~ WEIGHTED<=4 @1
// Process: g c~ > z g c~ WEIGHTED<=4 @1
// Process: g d~ > z g d~ WEIGHTED<=4 @1
// Process: g s~ > z g s~ WEIGHTED<=4 @1
// Process: u u > z u u WEIGHTED<=4 @1
// Process: c c > z c c WEIGHTED<=4 @1
// Process: u u~ > z g g WEIGHTED<=4 @1
// Process: c c~ > z g g WEIGHTED<=4 @1
// Process: u u~ > z u u~ WEIGHTED<=4 @1
// Process: c c~ > z c c~ WEIGHTED<=4 @1
// Process: d d > z d d WEIGHTED<=4 @1
// Process: s s > z s s WEIGHTED<=4 @1
// Process: d d~ > z g g WEIGHTED<=4 @1
// Process: s s~ > z g g WEIGHTED<=4 @1
// Process: d d~ > z d d~ WEIGHTED<=4 @1
// Process: s s~ > z s s~ WEIGHTED<=4 @1
// Process: u~ u~ > z u~ u~ WEIGHTED<=4 @1
// Process: c~ c~ > z c~ c~ WEIGHTED<=4 @1
// Process: d~ d~ > z d~ d~ WEIGHTED<=4 @1
// Process: s~ s~ > z s~ s~ WEIGHTED<=4 @1
// Process: u c > z u c WEIGHTED<=4 @1
// Process: u d > z u d WEIGHTED<=4 @1
// Process: u s > z u s WEIGHTED<=4 @1
// Process: c d > z c d WEIGHTED<=4 @1
// Process: c s > z c s WEIGHTED<=4 @1
// Process: u u~ > z c c~ WEIGHTED<=4 @1
// Process: c c~ > z u u~ WEIGHTED<=4 @1
// Process: u u~ > z d d~ WEIGHTED<=4 @1
// Process: u u~ > z s s~ WEIGHTED<=4 @1
// Process: c c~ > z d d~ WEIGHTED<=4 @1
// Process: c c~ > z s s~ WEIGHTED<=4 @1
// Process: u c~ > z u c~ WEIGHTED<=4 @1
// Process: c u~ > z c u~ WEIGHTED<=4 @1
// Process: u d~ > z u d~ WEIGHTED<=4 @1
// Process: u s~ > z u s~ WEIGHTED<=4 @1
// Process: c d~ > z c d~ WEIGHTED<=4 @1
// Process: c s~ > z c s~ WEIGHTED<=4 @1
// Process: d s > z d s WEIGHTED<=4 @1
// Process: d u~ > z d u~ WEIGHTED<=4 @1
// Process: d c~ > z d c~ WEIGHTED<=4 @1
// Process: s u~ > z s u~ WEIGHTED<=4 @1
// Process: s c~ > z s c~ WEIGHTED<=4 @1
// Process: d d~ > z u u~ WEIGHTED<=4 @1
// Process: d d~ > z c c~ WEIGHTED<=4 @1
// Process: s s~ > z u u~ WEIGHTED<=4 @1
// Process: s s~ > z c c~ WEIGHTED<=4 @1
// Process: d d~ > z s s~ WEIGHTED<=4 @1
// Process: s s~ > z d d~ WEIGHTED<=4 @1
// Process: d s~ > z d s~ WEIGHTED<=4 @1
// Process: s d~ > z s d~ WEIGHTED<=4 @1
// Process: u~ c~ > z u~ c~ WEIGHTED<=4 @1
// Process: u~ d~ > z u~ d~ WEIGHTED<=4 @1
// Process: u~ s~ > z u~ s~ WEIGHTED<=4 @1
// Process: c~ d~ > z c~ d~ WEIGHTED<=4 @1
// Process: c~ s~ > z c~ s~ WEIGHTED<=4 @1
// Process: d~ s~ > z d~ s~ WEIGHTED<=4 @1
//--------------------------------------------------------------------------

class P1_Sigma_sm_gg_zuux: public momemta::MatrixElement 
{
  public:

    // Constructor & destructor
    P1_Sigma_sm_gg_zuux(const ParameterSet& configuration); 
    virtual ~P1_Sigma_sm_gg_zuux() {}; 

    // Calculate flavour-independent parts of cross section.
    virtual momemta::MatrixElement::Result compute(
    const std::pair < std::vector<double> , std::vector<double> >
        &initialMomenta,
    const std::vector < std::pair < int, std::vector<double> > > &finalState); 

    virtual std::shared_ptr < momemta::MEParameters > getParameters() 
    {
      return params; 
    }

    // Make sure all helicity combinations are tried again (forget optimisation
    // consisting of not evaluating helicities which have given a zero result
    // once)
    virtual void resetHelicities(); 

  private:

    // default constructor should be hidden
    P1_Sigma_sm_gg_zuux() = delete; 

    // list of helicities combinations
    const int helicities[48][5] = {{-1, -1, -1, -1, -1}, {-1, -1, -1, -1, 1},
        {-1, -1, -1, 1, -1}, {-1, -1, -1, 1, 1}, {-1, -1, 0, -1, -1}, {-1, -1,
        0, -1, 1}, {-1, -1, 0, 1, -1}, {-1, -1, 0, 1, 1}, {-1, -1, 1, -1, -1},
        {-1, -1, 1, -1, 1}, {-1, -1, 1, 1, -1}, {-1, -1, 1, 1, 1}, {-1, 1, -1,
        -1, -1}, {-1, 1, -1, -1, 1}, {-1, 1, -1, 1, -1}, {-1, 1, -1, 1, 1},
        {-1, 1, 0, -1, -1}, {-1, 1, 0, -1, 1}, {-1, 1, 0, 1, -1}, {-1, 1, 0, 1,
        1}, {-1, 1, 1, -1, -1}, {-1, 1, 1, -1, 1}, {-1, 1, 1, 1, -1}, {-1, 1,
        1, 1, 1}, {1, -1, -1, -1, -1}, {1, -1, -1, -1, 1}, {1, -1, -1, 1, -1},
        {1, -1, -1, 1, 1}, {1, -1, 0, -1, -1}, {1, -1, 0, -1, 1}, {1, -1, 0, 1,
        -1}, {1, -1, 0, 1, 1}, {1, -1, 1, -1, -1}, {1, -1, 1, -1, 1}, {1, -1,
        1, 1, -1}, {1, -1, 1, 1, 1}, {1, 1, -1, -1, -1}, {1, 1, -1, -1, 1}, {1,
        1, -1, 1, -1}, {1, 1, -1, 1, 1}, {1, 1, 0, -1, -1}, {1, 1, 0, -1, 1},
        {1, 1, 0, 1, -1}, {1, 1, 0, 1, 1}, {1, 1, 1, -1, -1}, {1, 1, 1, -1, 1},
        {1, 1, 1, 1, -1}, {1, 1, 1, 1, 1}};

    // Private functions to calculate the matrix element for all subprocesses
    // Wavefunctions
    void calculate_wavefunctions(const int perm[], const int hel[]); 
    std::complex<double> amp[168]; 

    // Matrix elements
    double matrix_1_gg_zuux(); 
    double matrix_1_gg_zddx(); 
    double matrix_1_gu_zgu(); 
    double matrix_1_gd_zgd(); 
    double matrix_1_gux_zgux(); 
    double matrix_1_gdx_zgdx(); 
    double matrix_1_uu_zuu(); 
    double matrix_1_uux_zgg(); 
    double matrix_1_uux_zuux(); 
    double matrix_1_dd_zdd(); 
    double matrix_1_ddx_zgg(); 
    double matrix_1_ddx_zddx(); 
    double matrix_1_uxux_zuxux(); 
    double matrix_1_dxdx_zdxdx(); 
    double matrix_1_uc_zuc(); 
    double matrix_1_ud_zud(); 
    double matrix_1_uux_zccx(); 
    double matrix_1_uux_zddx(); 
    double matrix_1_ucx_zucx(); 
    double matrix_1_udx_zudx(); 
    double matrix_1_ds_zds(); 
    double matrix_1_dux_zdux(); 
    double matrix_1_ddx_zuux(); 
    double matrix_1_ddx_zssx(); 
    double matrix_1_dsx_zdsx(); 
    double matrix_1_uxcx_zuxcx(); 
    double matrix_1_uxdx_zuxdx(); 
    double matrix_1_dxsx_zdxsx(); 

    // map of final states
    std::map < std::vector<int> , std::vector < SubProcess <
        P1_Sigma_sm_gg_zuux >> > mapFinalStates;

    // Reference to the model parameters instance passed in the constructor
    std::shared_ptr < Parameters_sm > params; 

    // vector with external particle masses
    std::vector < std::reference_wrapper<double> > mME; 

    // vector with momenta (to be changed each event)
    double * momenta[5]; 
}; 


}

