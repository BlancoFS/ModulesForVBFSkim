// 
// *  This file was automatically generated by MoMEMta-MaGMEE,
// *  A MadGraph Matrix Element Exporter plugin for MoMEMta.
// *
// *  It is subject to MoMEMta-MaGMEE's license and copyright:
// *
// *  Copyright (C) 2016  Universite catholique de Louvain (UCL), Belgium
// *
// *  This program is free software: you can redistribute it and/or modify
// *  it under the terms of the GNU General Public License as published by
// *  the Free Software Foundation, either version 3 of the License, or
// *  (at your option) any later version.
// *
// *  This program is distributed in the hope that it will be useful,
// *  but WITHOUT ANY WARRANTY; without even the implied warranty of
// *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// *  GNU General Public License for more details.
// *
// *  You should have received a copy of the GNU General Public License
// *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 

#pragma once

#include <complex> 
#include <vector> 
#include <utility> 
#include <map> 
#include <functional> 

#include <Parameters_HPO_ewk_prod_NLO.h> 
#include <SubProcess.h> 

#include <momemta/MatrixElement.h> 

namespace qqH_hww_ME_HPO_ewk_prod_NLO 
{

//==========================================================================
// A class for calculating the matrix elements for
// Process: u u > h u u HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c c > h c c HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d d > h d d HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s s > h s s HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u~ u~ > h u~ u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c~ c~ > h c~ c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d~ d~ > h d~ d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s~ s~ > h s~ s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u d > h u d HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c s > h c s HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u s > h u s HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c d > h c d HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u~ d~ > h u~ d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c~ s~ > h c~ s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u~ s~ > h u~ s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c~ d~ > h c~ d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u c > h u c HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u u~ > h u u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u c~ > h u c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c u~ > h c u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c c~ > h c c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u d~ > h u d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u s~ > h u s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c d~ > h c d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c s~ > h c s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d s > h d s HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d u~ > h d u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d c~ > h d c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s u~ > h s u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s c~ > h s c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d d~ > h d d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d s~ > h d s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s d~ > h s d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s s~ > h s s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u~ c~ > h u~ c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d~ s~ > h d~ s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u d > h u s HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u s > h c s HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u d > h c d HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c d > h c s HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u d > h c s HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u s > h u d HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c s > h u s HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u s > h c d HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c d > h u s HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u u~ > h d d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u c~ > h d s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c u~ > h s d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c c~ > h s s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u u~ > h d s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c u~ > h s s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u u~ > h s d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u c~ > h s s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u u~ > h s s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u c~ > h d d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c c~ > h s d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u c~ > h s d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c d > h u d HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c s > h c d HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c s > h u d HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c u~ > h d d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c c~ > h d s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c u~ > h d s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c c~ > h d d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d d~ > h u u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d s~ > h u c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s d~ > h c u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s s~ > h c c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d d~ > h u c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s d~ > h c c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d d~ > h c u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d s~ > h c c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d d~ > h c c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d s~ > h u u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s s~ > h c u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: d s~ > h c u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s d~ > h u u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s s~ > h u c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s d~ > h u c~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: s s~ > h u u~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u~ d~ > h u~ s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u~ s~ > h c~ s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u~ d~ > h c~ d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c~ d~ > h c~ s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u~ d~ > h c~ s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u~ s~ > h u~ d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c~ s~ > h u~ s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: u~ s~ > h c~ d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c~ d~ > h u~ s~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c~ d~ > h u~ d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c~ s~ > h c~ d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
// Process: c~ s~ > h u~ d~ HPO<=1 QCD=0 YUK=0 $$ a z w+ w- @1
//--------------------------------------------------------------------------

class P1_Sigma_HPO_ewk_prod_NLO_uu_huu: public momemta::MatrixElement 
{
  public:

    // Constructor & destructor
    P1_Sigma_HPO_ewk_prod_NLO_uu_huu(const ParameterSet& configuration); 
    virtual ~P1_Sigma_HPO_ewk_prod_NLO_uu_huu() {}; 

    // Calculate flavour-independent parts of cross section.
    virtual momemta::MatrixElement::Result compute(
    const std::pair < std::vector<double> , std::vector<double> >
        &initialMomenta,
    const std::vector < std::pair < int, std::vector<double> > > &finalState); 

    virtual std::shared_ptr < momemta::MEParameters > getParameters() 
    {
      return params; 
    }

    // Make sure all helicity combinations are tried again (forget optimisation
    // consisting of not evaluating helicities which have given a zero result
    // once)
    virtual void resetHelicities(); 

  private:

    // default constructor should be hidden
    P1_Sigma_HPO_ewk_prod_NLO_uu_huu() = delete; 

    // list of helicities combinations
    const int helicities[16][5] = {{-1, -1, 0, -1, -1}, {-1, -1, 0, -1, 1},
        {-1, -1, 0, 1, -1}, {-1, -1, 0, 1, 1}, {-1, 1, 0, -1, -1}, {-1, 1, 0,
        -1, 1}, {-1, 1, 0, 1, -1}, {-1, 1, 0, 1, 1}, {1, -1, 0, -1, -1}, {1,
        -1, 0, -1, 1}, {1, -1, 0, 1, -1}, {1, -1, 0, 1, 1}, {1, 1, 0, -1, -1},
        {1, 1, 0, -1, 1}, {1, 1, 0, 1, -1}, {1, 1, 0, 1, 1}};

    // Private functions to calculate the matrix element for all subprocesses
    // Wavefunctions
    void calculate_wavefunctions(const int perm[], const int hel[]); 
    std::complex<double> amp[241]; 

    // Matrix elements
    double matrix_1_uu_huu(); 
    double matrix_1_dd_hdd(); 
    double matrix_1_uxux_huxux(); 
    double matrix_1_dxdx_hdxdx(); 
    double matrix_1_ud_hud(); 
    double matrix_1_us_hus(); 
    double matrix_1_cd_hcd(); 
    double matrix_1_uxdx_huxdx(); 
    double matrix_1_uxsx_huxsx(); 
    double matrix_1_cxdx_hcxdx(); 
    double matrix_1_uc_huc(); 
    double matrix_1_uux_huux(); 
    double matrix_1_udx_hudx(); 
    double matrix_1_ds_hds(); 
    double matrix_1_dux_hdux(); 
    double matrix_1_ddx_hddx(); 
    double matrix_1_uxcx_huxcx(); 
    double matrix_1_dxsx_hdxsx(); 
    double matrix_1_ud_hus(); 
    double matrix_1_ud_hcd(); 
    double matrix_1_ud_hcs(); 
    double matrix_1_us_hud(); 
    double matrix_1_us_hcd(); 
    double matrix_1_uux_hddx(); 
    double matrix_1_uux_hdsx(); 
    double matrix_1_uux_hsdx(); 
    double matrix_1_uux_hssx(); 
    double matrix_1_ucx_hddx(); 
    double matrix_1_ucx_hsdx(); 
    double matrix_1_cd_hud(); 
    double matrix_1_cs_hud(); 
    double matrix_1_cux_hddx(); 
    double matrix_1_cux_hdsx(); 
    double matrix_1_ccx_hddx(); 
    double matrix_1_ddx_huux(); 
    double matrix_1_ddx_hucx(); 
    double matrix_1_ddx_hcux(); 
    double matrix_1_ddx_hccx(); 
    double matrix_1_dsx_huux(); 
    double matrix_1_dsx_hcux(); 
    double matrix_1_sdx_huux(); 
    double matrix_1_sdx_hucx(); 
    double matrix_1_ssx_huux(); 
    double matrix_1_uxdx_huxsx(); 
    double matrix_1_uxdx_hcxdx(); 
    double matrix_1_uxdx_hcxsx(); 
    double matrix_1_uxsx_huxdx(); 
    double matrix_1_uxsx_hcxdx(); 
    double matrix_1_cxdx_huxdx(); 
    double matrix_1_cxsx_huxdx(); 

    // map of final states
    std::map < std::vector<int> , std::vector < SubProcess <
        P1_Sigma_HPO_ewk_prod_NLO_uu_huu >> > mapFinalStates;

    // Reference to the model parameters instance passed in the constructor
    std::shared_ptr < Parameters_HPO_ewk_prod_NLO > params; 

    // vector with external particle masses
    std::vector < std::reference_wrapper<double> > mME; 

    // vector with momenta (to be changed each event)
    double * momenta[5]; 
}; 


}

